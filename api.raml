#%RAML 1.0 Extension

extends: https://raw.githubusercontent.com/VEuPathDB/docs-api-schema/v2.0.2/libraries/base-service.raml

title: Example Async JaxRS Container Service
version: 1.0.0
mediaType: application/json

uses:
  error: https://raw.githubusercontent.com/VEuPathDB/docs-api-schema/v2.0.2/libraries/errors.raml
  lib: schema/library.raml

#
# Top-level endpoint returns list of compute options and serves as a parent to plugin endpoints
#
/computes:
  displayName: Available Plugins
  get:
    responses:
      200:
        body:
          application/json:
            type: array
            items:
              type: lib.PluginOverview

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  #                                                                           #
  #  Begin Plugin Endpoint Definitions                                        #
  #                                                                           #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  /example:
    post:
      queryParameters:
        autostart:
          type: boolean
          required: false
          default: true
      body:
        application/json: lib.ExamplePluginRequest
      responses:
        200:
          body:
            application/json: lib.JobResponse
    /{file}:
      uriParameters:
        file:
          type: string
          description: MUST be one of "meta", "tabular", "statistics".
      post:
        body:
          application/json: lib.ExamplePluginRequest
        responses:
          200:
            body:
              text/plain: any


  /betadiv:
    post:
      queryParameters:
        autostart:
          type: boolean
          required: false
          default: true
      body:
        application/json: lib.BetaDivPluginRequest
      responses:
        200:
          body:
            application/json: lib.JobResponse
    /{file}:
      uriParameters:
        file:
          type: string
          description: MUST be one of "meta", "tabular", "statistics".
      post:
        body:
          application/json: lib.BetaDivPluginRequest
        responses:
          200:
            body:
              text/plain: any

  /alphadiv:
    post:
      queryParameters:
        autostart:
          type: boolean
          required: false
          default: true
      body:
        application/json: lib.AlphaDivPluginRequest
      responses:
        200:
          body:
            application/json: lib.JobResponse
    /{file}:
      uriParameters:
        file:
          type: string
          description: MUST be one of "meta", "tabular", "statistics".
      post:
        body:
          application/json: lib.AlphaDivPluginRequest
        responses:
          200:
            body:
              text/plain: any

  /rankedabundance:
    post:
      queryParameters:
        autostart:
          type: boolean
          required: false
          default: true
      body:
        application/json: lib.RankedAbundancePluginRequest
      responses:
        200:
          body:
            application/json: lib.JobResponse
    /{file}:
      uriParameters:
        file:
          type: string
          description: MUST be one of "meta", "tabular", "statistics".
      post:
        body:
          application/json: lib.RankedAbundancePluginRequest
        responses:
          200:
            body:
              text/plain: any

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  #                                                                           #
  #  End Plugin Endpoint Definitions                                          #
  #                                                                           #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

/jobs-expiration:
  get:
    description: Expire jobs based on criteria
    queryParameters:
      study-id:
        type: string
      plugin-name:
        type: string
      admin-auth-token:
        type: string
    responses:
      200:
        body:
          application/json:
            type: lib.ExpiredJobsResponse

# NOTE: jobs endpoint is NOT publicly exposed for this service
/jobs:
  /{job-id}:
    uriParameters:
      job-id:
        type: string
        minLength: 32
        maxLength: 32
        pattern: '^[\dA-Fa-f]{32}$'
    delete:
      description: Deletes a target job by ID
      responses:
        204:
          description: Success
        404:
          description: Not Found
          body:
            application/json:
              type: error.NotFoundError
        500:
          description: Server Error
          body:
            application/json:
              type: error.ServerError
    get:
      description: Gets the status of the target job.
      responses:
        200:
          description: |
            Success
            
            The target job exists and its status returned.
          body:
            application/json:
              type: lib.JobResponse
              examples:
                queued:
                  strict: true
                  value:
                    jobID: 9ab9a5886d6abb9ebc82a40f770a1db3
                    status: queued
                    queuePosition: 3
                in-progress:
                  strict: true
                  value:
                    jobID: 9ab9a5886d6abb9ebc82a40f770a1db3
                    status: in-progress
                complete:
                  strict: true
                  value:
                    jobID: 9ab9a5886d6abb9ebc82a40f770a1db3
                    status: complete
                failed:
                  strict: true
                  value:
                    jobID: 9ab9a5886d6abb9ebc82a40f770a1db3
                    status: failed
                expired:
                  strict: true
                  value:
                    jobID: 9ab9a5886d6abb9ebc82a40f770a1db3
                    status: expired
        404:
          description: |
            Not Found
            
            The target `{job-id}` was not found.
          body:
            application/json:
              type: error.NotFoundError
        500:
          description: |
            Internal Server Error
            
            An unexpected exception was thrown while attempting to process
            the request.
          body:
            application/json:
              type: error.ServerError
    /files:
      get:
        description: |
          Lists the files available for a completed job.
        responses:
          200:
            description: |
              Success
              
              The job has completed and has files available.
            body:
              application/json:
                type: string[]
                example:
                  - output
          403:
            description: |
              Forbidden
              
              The job has not yet completed and thus cannot yet be queried for
              files.
            body:
              application/json:
                type: error.ForbiddenError
          404:
            description: |
              Not Found
              
              The target `{job-id}` was not found.
            body:
              application/json:
                type: error.NotFoundError
          500:
            description: |
              Internal Server Error
              
              An unexpected exception was thrown while attempting to process
              the request.
            body:
              application/json:
                type: error.ServerError
      /{file-name}:
        uriParameters:
          file-name:
            type: string
            minLength: 1
        get:
          description: |
            Returns the target file from a completed job.
          responses:
            200:
              description: |
                Success
                
                The job has completed and the target file exists to return.
              headers:
                Content-Disposition:
                  type: string
                  example:
                    value: attachment; filename=output.txt
              body:
                text/plain:
                  type: any
                  example: dlrow olleh
            403:
              description: |
                Forbidden
                
                The job has not yet completed and thus cannot yet be queried for
                files.
              body:
                application/json:
                  type: error.ForbiddenError
            404:
              description: |
                Not Found
                
                Either the target `{job-id}` was not found or no file with the
                name `{file-name}` exists.
              body:
                application/json:
                  type: error.NotFoundError
            500:
              description: |
                Internal Server Error
                
                An unexpected exception was thrown while attempting to process
                the request.
              body:
                application/json:
                  type: error.ServerError
